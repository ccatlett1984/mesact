#!/usr/bin/env python3

import sys, os, traceback
from platform import python_version

# disable cache usage must be before any local imports
sys.dont_write_bytecode = True

'''
Dependencies
sudo apt install python3-pyqt5
sudo apt install python3-packaging
sudo apt install zip
'''

VERSION = '2.1.7'
BUILD_DATE = '2/4/2025'

import distro
from traceback import StackSummary
from functools import partial

from PyQt5.QtWidgets import QApplication, QMainWindow, QProgressBar
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtCore import QTimer, QSettings, qVersion
from PyQt5 import uic

from libmesact import connections
from libmesact import dialogs
from libmesact import startup
from libmesact import openini
from libmesact import updateini
from libmesact import shutdown

class MainWindow(QMainWindow):
	def __init__(self):
		super().__init__()
		'''
		if sys.argv[-1] == 't':
			self.testing = True
		else:
			self.testing = False
		'''
		if os.path.split(sys.argv[0])[0] == '/usr/bin':
			self.lib_path = '/usr/lib/libmesact'
			self.docs_path = '/usr/share/doc/mesact'
			self.installed = True
			uic.loadUi(os.path.join(self.lib_path, 'mesact.ui'), self)
		else:
			srcPath = os.path.split(os.path.realpath(sys.argv[0]))[0]
			self.lib_path = os.path.join(srcPath, 'libmesact')
			self.docs_path = srcPath
			self.installed = False
			uic.loadUi(os.path.join(srcPath, 'mesact.ui'), self)
		stylesheet = os.path.join(self.lib_path, 'mesact.qss')
		with open(stylesheet,'r') as fh:
			self.setStyleSheet(fh.read())

		self.firmware_path = f'{os.path.expanduser("~")}/.local/lib/libmesact'
		self.image_path = f'{os.path.expanduser("~")}/.local/lib/libmesact/boards'
		sys.excepthook = self.excepthook
		self.version = VERSION
		self.emcVersion = '1.1'
		self.setWindowTitle(f'Mesa Configuration Tool - Version {VERSION} - Build Date {BUILD_DATE}')
		self.progressBar = QProgressBar()
		self.statusBar().addPermanentWidget(self.progressBar)
		self.timer=QTimer()
		self.settings = QSettings('mesact', 'mesact')
		self.updateini = updateini.updateini()
		self.loadini = openini.loadini()
		self.boardType = False # eth or pci
		#self.board = ''
		self.password = None
		self.mesaflash = False
		connections.connect(self)
		startup.setup(self)
		self.show()

	def resizeEvent(self, event):
		width = self.geometry().width()
		height =  self.geometry().height()
		self.sizeLB.setText(f'{width}x{height}')
		QMainWindow.resizeEvent(self, event)

	def excepthook(self, exc_type, exc_value, tb):
		# extract the stack summary
		summary = traceback.extract_tb(tb)
		for frame_summary in summary:
			filename = frame_summary.filename
			frame_summary.filename = os.path.relpath(filename)

		# rebuild the traceback and build the error message
		msg = f'Mesact Version: {VERSION} Build Date: {BUILD_DATE}\n\n'
		msg += ''.join(traceback.format_list(StackSummary.from_list(summary)))
		msg += f'\n{exc_type.__name__}\n'
		msg += f'{exc_value}\n'
		msg += '\nFirst download the deb and reinstall\n'
		msg += 'to be sure you have the latest build date\n'
		msg += '\nThen please file an issue at\n'
		msg += 'https://github.com/jethornton/mesact/issues'
		print(msg)
		dialogs.errorMsgOk(msg, 'PROGRAM ERROR' )

	def closeEvent(self, event):
		shutdown.save_settings(self)

app = QApplication(sys.argv)
# check python version
os_id = distro.id()
#print(os_id) note maybe a better way in startup.py 118
allowed_os = ['debian', 'ubuntu', 'linuxmint']
qt_version = qVersion().split('.')
if (sys.version_info.major, sys.version_info.minor) < (3, 6):
	msg = (f'Python 3.6 or newer is required.\nYour Python is {python_version()}')
	dialogs.errorMsgOk(msg, 'Version Error')
	sys.exit()

elif os_id not in allowed_os:
	msg = ('Debian is required to run\n'
	'the Mesa Configuration Tool\n'
	f'Python reports your OS is {os_id}')
	dialogs.errorMsgOk(msg, 'OS Error')
	sys.exit()

elif (int(qt_version[0]), int(qt_version[1])) < (5, 15):
	msg = (f'PyQt5 5.15 or newer is required.\nYour PyQt5 is {qVersion()}\n'
	'Try updating python3-pyqt5')
	dialogs.errorMsgOk(msg, 'Version Error')
	sys.exit()

else:
	ex = MainWindow()
sys.exit(app.exec_())


